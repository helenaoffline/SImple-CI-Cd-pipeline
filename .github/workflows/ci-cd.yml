# .github/workflows/ci-cd.yml
name: CI/CD Pipeline - Java Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # Permite execu√ß√£o manual

jobs:
  # üèó STAGE 1 ‚Äî BUILD
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configurar JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Compilar e empacotar
        run: mvn clean package -DskipTests

      - name: Salvar artefato gerado
        uses: actions/upload-artifact@v4
        with:
          name: meu-jar
          path: target/*.jar

  # üìù STAGE 1.5 ‚Äî SONAR ANALYSIS
  sonar:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configurar JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Executar an√°lise Sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn sonar:sonar \
          -Dsonar.projectKey=SEU_PROJETO_KEY \
          -Dsonar.organization=SEU_ORGANIZATION_KEY \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=$SONAR_TOKEN

  # üß™ STAGE 2 ‚Äî TEST
  test:
    runs-on: ubuntu-latest
    needs: [build, sonar]   # espera build e sonar
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configurar JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Executar testes
        run: mvn test

  # üöÄ STAGE 3 ‚Äî DEPLOY
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'  # s√≥ roda na branch main
    steps:
      - name: Baixar artefato do build
        uses: actions/download-artifact@v4
        with:
          name: meu-jar
          path: deploy/

      - name: Simular deploy
        run: |
          echo "Iniciando deploy do artefato:"
          ls -lh deploy/
          echo "Deploy finalizado com sucesso!"
